package edu.grinnell.csc207.soundsofsorting.sorts;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import edu.grinnell.csc207.soundsofsorting.events.CompareEvent;
import edu.grinnell.csc207.soundsofsorting.events.CopyEvent;
import edu.grinnell.csc207.soundsofsorting.events.SortEvent;
import edu.grinnell.csc207.soundsofsorting.events.SwapEvent;

/**
 * A collection of sorting algorithms.
 */
public class Sorts {

    /**
     * Swaps indices `i` and `j` of array `arr`.
     *
     * @param <T> the carrier type of the array
     * @param arr the array to swap
     * @param i the first index to swap
     * @param j the second index to swap
     */
    public static <T> void swap(T[] arr, int i, int j) {
        T tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }

    /**
     * Sorts the array according to the bubble sort algorithm:
     * <pre>
     * [ unprocessed | i largest elements in order ]
     * </pre>
     *
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> bubbleSort(T[] arr) {
        List<SortEvent<T>> events = new ArrayList<>();

        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr.length - i - 1; j++) {
                events.add(new CompareEvent<>(j, j + 1));
                if (arr[j].compareTo(arr[j + 1]) > 0) {
                    swap(arr, j, j + 1);
                    events.add(new SwapEvent<>(j, j + 1));
                }
            }
        }
        return events;
    }

    /**
     * Sorts the array according to the selection sort algorithm:
     * <pre>
     * [ i smallest elements in order | unprocessed ]
     * </pre>
     *
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> selectionSort(T[] arr) {
        List<SortEvent<T>> events = new ArrayList<>();

        for (int i = 0; i < arr.length; i++) {
            int minIdx = i;
            for (int j = i + 1; j < arr.length; j++) {
                events.add(new CompareEvent<>(i, j));
                if (arr[j].compareTo(arr[minIdx]) < 0) {
                    minIdx = j;
                }
            }
            if (minIdx != i) {
                swap(arr, i, minIdx);
                events.add(new SwapEvent<>(i, minIdx));
            }
        }
        return events;
    }

    /**
     * Sorts the array according to the insertion sort algorithm:
     * <pre>
     * [ i elements in order | unprocessed ]
     * </pre>
     *
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> insertionSort(T[] arr) {
        List<SortEvent<T>> events = new ArrayList<>();

        for (int i = 1; i < arr.length; i++) {
            T key = arr[i];
            int j = i - 1;
            while (j >= 0) {
                events.add(new CompareEvent<>(j, j + 1));
                if (arr[j].compareTo(key) > 0) {
                    arr[j + 1] = arr[j];
                    events.add(new CopyEvent<>(j + 1, arr[j]));
                    j--;
                } else {
                    break;
                }
            }
            arr[j + 1] = key;
            events.add(new CopyEvent<>(j + 1, key));
        }
        return events;
    }

    /**
     * Sorts the array according to the merge sort algorithm.
     *
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> mergeSort(T[] arr) {
        List<SortEvent<T>> events = new ArrayList<>();
        mergeSortHelper(arr, 0, arr.length, events);
        return events;
    }

    private static <T extends Comparable<? super T>> void mergeSortHelper(T[] arr, int lo, int hi, List<SortEvent<T>> events) {
        if (hi - lo <= 1) {
            return;
        }

        int mid = lo + (hi - lo) / 2;
        mergeSortHelper(arr, lo, mid, events);
        mergeSortHelper(arr, mid, hi, events);
        merge(arr, lo, mid, hi, events);
    }

    private static <T extends Comparable<? super T>> void merge(T[] arr, int lo, int mid, int hi, List<SortEvent<T>> events) {
        List<T> temp = new ArrayList<>();
        int i = lo;
        int j = mid;

        while (i < mid && j < hi) {
            events.add(new CompareEvent<>(i, j));
            if (arr[i].compareTo(arr[j]) <= 0) {
                temp.add(arr[i]);
                events.add(new CopyEvent<>(temp.size() - 1, arr[i]));
                i++;
            } else {
                temp.add(arr[j]);
                events.add(new CopyEvent<>(temp.size() - 1, arr[j]));
                j++;
            }
        }

        while (i < mid) {
            temp.add(arr[i]);
            events.add(new CopyEvent<>(temp.size() - 1, arr[i]));
            i++;
        }

        while (j < hi) {
            temp.add(arr[j]);
            events.add(new CopyEvent<>(temp.size() - 1, arr[j]));
            j++;
        }

        for (int k = 0; k < temp.size(); k++) {
            arr[lo + k] = temp.get(k);
            events.add(new CopyEvent<>(lo + k, temp.get(k)));
        }
    }

    /**
     * Sorts the array according to the quick sort algorithm.
     *
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> quickSort(T[] arr) {
        List<SortEvent<T>> events = new ArrayList<>();
        quickSortHelper(arr, 0, arr.length - 1, events);
        return events;
    }

    private static <T extends Comparable<? super T>> void quickSortHelper(T[] arr, int lo, int hi, List<SortEvent<T>> events) {
        if (lo < hi) {
            int pivot = partition(arr, lo, hi, events);
            quickSortHelper(arr, lo, pivot - 1, events);
            quickSortHelper(arr, pivot + 1, hi, events);
        }
    }

    private static <T extends Comparable<? super T>> int partition(T[] arr, int lo, int hi, List<SortEvent<T>> events) {
        T pivot = arr[hi];
        int i = lo - 1;

        for (int j = lo; j < hi; j++) {
            events.add(new CompareEvent<>(j, hi));
            if (arr[j].compareTo(pivot) <= 0) {
                i++;
                swap(arr, i, j);
                events.add(new SwapEvent<>(i, j));
            }
        }
        swap(arr, i + 1, hi);
        events.add(new SwapEvent<>(i + 1, hi));
        return i + 1;
    }

    /**
     * Sorts the array according to the strand sort algorithm.
     *
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> strandSort(T[] arr) {
        List<SortEvent<T>> events = new ArrayList<>();
        List<T> input = new ArrayList<>(Arrays.asList(arr));
        List<T> output = new ArrayList<>();

        while (!input.isEmpty()) {
            List<T> strand = new ArrayList<>();
            strand.add(input.remove(0));
            int i = 0;

            while (i < input.size()) {
                T last = strand.get(strand.size() - 1);
                events.add(new CompareEvent<>(i, i));
                if (input.get(i).compareTo(last) >= 0) {
                    strand.add(input.remove(i));
                } else {
                    i++;
                }
            }
            output = mergeLists(output, strand, events);
        }

        for (int i = 0; i < output.size(); i++) {
            arr[i] = output.get(i);
            events.add(new CopyEvent<>(i, output.get(i)));
        }

        return events;
    }

    private static <T extends Comparable<? super T>> List<T> mergeLists(List<T> list1, List<T> list2, List<SortEvent<T>> events) {
        List<T> result = new ArrayList<>();
        int i = 0;
        int j = 0;

        while (i < list1.size() && j < list2.size()) {
            events.add(new CompareEvent<>(i, j));

            if (list1.get(i).compareTo(list2.get(j)) <= 0) {
                result.add(list1.get(i));
                i++;
            } else {
                result.add(list2.get(j));
                j++;
            }
        }

        while (i < list1.size()) {
            result.add(list1.get(i++));
        }

        while (j < list2.size()) {
            result.add(list2.get(j++));
        }

        return result;
    }

    /**
     * Applies the given sort events to the array.
     *
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @param events the sort events to apply
     */
    public static <T> void eventSort(T[] arr, List<SortEvent<T>> events) {
        for (SortEvent<T> event : events) {
            event.apply(arr);
        }
    }
}
